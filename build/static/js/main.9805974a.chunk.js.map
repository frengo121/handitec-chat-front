{"version":3,"sources":["components/Header/style.js","components/Header/index.jsx","layouts/style.js","layouts/index.jsx","config/index.js","views/Home/style.js","views/Home/index.jsx","views/index.jsx","assets/js/serviceWorker.js","index.js"],"names":["WrapperHeader","styled","header","StyledImage","img","Header","fluid","lg","xs","src","div","Content","GlobalStyle","createGlobalStyle","Layout","children","Config","api","process","WrapperChat","StyledContainer","Container","StyledRow","Row","StyledCol","Col","socket","io","Home","useState","messages","setMessages","useEffect","on","message","console","log","retrieveNewMessages","oldArray","className","type","placeholder","onKeyUp","event","body","target","value","keyCode","from","emit","lgOffset","map","index","key","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"8aAEO,IAAMA,EAAgBC,UAAOC,OAAV,KAKbC,EAAcF,UAAOG,IAAV,KCaTC,EAdA,WACb,OACE,kBAACL,EAAD,KACE,kBAAC,YAAD,CAAWM,OAAO,GAChB,kBAAC,MAAD,KACE,kBAAC,MAAD,CAAKC,GAAI,EAAGC,GAAI,IACd,kBAACL,EAAD,CAAaM,IAAI,wE,0hCCVNR,UAAOS,IAAV,KAAb,IAEMC,EAAUV,UAAOS,IAAV,KAOPE,EAAcC,4BAAH,KCITC,EAVA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChB,OACE,oCACE,kBAACH,EAAD,MACA,kBAAC,EAAD,MACA,kBAACD,EAAD,KAAUI,K,iBCNDC,EAJA,CACbC,IAAKC,gC,qdCEA,IAAMC,EAAclB,UAAOS,IAAV,KAIXU,EAAkBnB,kBAAOoB,YAAPpB,CAAH,KAMfqB,EAAYrB,kBAAOsB,MAAPtB,CAAH,KAITuB,EAAYvB,kBAAOwB,MAAPxB,CAAH,KCNhByB,EAASC,IAAGX,EAAOC,KA6DVW,EA3DF,WAAO,IAAD,EACeC,mBAAS,IADxB,mBACVC,EADU,KACAC,EADA,KAGjBC,qBAAU,WACRN,EAAOO,GAAG,WAAW,SAACC,GACpBC,QAAQC,IAAI,yBAA0BF,GACtCG,EAAoBH,QAErB,IAEH,IAAMG,EAAsB,SAACH,GAC3BH,GAAY,SAACO,GAAD,4BAAkBA,GAAlB,CAA4BJ,QAkB1C,OAFAC,QAAQC,IAAI,WAAYN,GAGtB,kBAAC,EAAD,CAAQS,UAAU,OAChB,kBAACnB,EAAD,KACE,kBAAC,MAAD,KACE,kBAAC,MAAD,KACE,2BACEoB,KAAK,OACLC,YAAY,kBACZC,QAvBS,SAACC,GACpB,IAAMC,EAAOD,EAAME,OAAOC,MAC1B,GAAqB,IAAjBH,EAAMI,SAAiBH,EAAM,CAC/B,IAAMV,EAAU,CACdU,OACAI,KAAM,MAERjB,EAAY,GAAD,mBAAKD,GAAL,CAAeI,KAC1BR,EAAOuB,KAAK,UAAWL,GACvBD,EAAME,OAAOC,MAAQ,SAkBnB,kBAACxB,EAAD,KACE,kBAACE,EAAD,CAAWjB,GAAI,EAAG2C,SAAU,GAC1B,kBAAC/B,EAAD,KACGW,EAASqB,KAAI,SAACjB,EAASkB,GACtB,OACE,uBAAGC,IAAKD,GACLlB,EAAQc,KADX,KACmBd,EAAQU,eCrC9BU,EAlBH,WACV,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KAOE,kBAAC,IAAD,CAAOC,KAAK,KACV,kBAAC,EAAD,UCJUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMvC,a","file":"static/js/main.9805974a.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const WrapperHeader = styled.header`\n  background: transparent;\n  padding: 1rem 0;\n`\n\nexport const StyledImage = styled.img`\n  max-width: 100%;\n`\n","import React from 'react'\n\nimport { Col, Container, Row } from 'styled-bootstrap-grid'\n\nimport { WrapperHeader, StyledImage } from './style'\n\nconst Header = () => {\n  return (\n    <WrapperHeader>\n      <Container fluid={true}>\n        <Row>\n          <Col lg={3} xs={12}>\n            <StyledImage src=\"https://www.handytec.mobi/images/logos/handytec_logo_index.svg\" />\n          </Col>\n        </Row>\n      </Container>\n    </WrapperHeader>\n  )\n}\n\nexport default Header\n","import styled, { createGlobalStyle } from 'styled-components'\n\nexport const Wrapper = styled.div``\n\nexport const Content = styled.div`\n  flex: auto;\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n`\n\nexport const GlobalStyle = createGlobalStyle`\n  html {\n      font-family: 'Futura';\n      font-size: 15px;\n      min-height: 100%;\n      height: 100%;\n      color: #575756;\n      background: #1E1D1C;\n      body{\n          background: url('https://www.handytec.mobi/images/backgrounds/imagen_home-01.png');\n          background-size:contain;\n          background-position: 0 0;\n          background-repeat: no-repeat;\n          min-height: 100%;\n          -webkit-font-smoothing: antialiased;\n          -moz-osx-font-smoothing: grayscale;\n          *, ::after, ::before{\n            box-sizing: border-box;\n          }\n          margin: 0;\n          #root{\n            min-height: 100vh;\n            display: flex;\n            flex-direction: column;\n          }\n        } \n  }\n  `\n","import React from 'react'\n\nimport Header from '../components/Header'\nimport { Content, GlobalStyle } from './style'\n\nconst Layout = ({ children }) => {\n  return (\n    <>\n      <GlobalStyle />\n      <Header />\n      <Content>{children}</Content>\n    </>\n  )\n}\n\nexport default Layout\n","const Config = {\n  api: process.env.REACT_APP_API_URL,\n}\n\nexport default Config\n","import styled from 'styled-components'\nimport { Container, Row, Col } from 'styled-bootstrap-grid'\n\nexport const WrapperChat = styled.div`\n  background: white;\n  min-height: 30vh;\n`\nexport const StyledContainer = styled(Container)`\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n`\n\nexport const StyledRow = styled(Row)`\n  flex: 1;\n`\n\nexport const StyledCol = styled(Col)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`\n","import React, { useState, useEffect } from 'react'\nimport { Row, Col } from 'styled-bootstrap-grid'\nimport Layout from '../../layouts'\n\nimport io from 'socket.io-client'\n\nimport Config from '../../config'\n\nimport { WrapperChat, StyledContainer, StyledCol, StyledRow } from './style'\n\n// import logo from '../../assets/images/logo.svg'\nconst socket = io(Config.api)\n\nconst Home = () => {\n  const [messages, setMessages] = useState([])\n\n  useEffect(() => {\n    socket.on('message', (message) => {\n      console.log('nuevo mensaje de event', message)\n      retrieveNewMessages(message)\n    })\n  }, [])\n\n  const retrieveNewMessages = (message) => {\n    setMessages((oldArray) => [...oldArray, message])\n  }\n\n  const handleSubmit = (event) => {\n    const body = event.target.value\n    if (event.keyCode == 13 && body) {\n      const message = {\n        body,\n        from: 'me',\n      }\n      setMessages([...messages, message])\n      socket.emit('message', body)\n      event.target.value = ''\n    }\n  }\n\n  console.log('messages', messages)\n\n  return (\n    <Layout className=\"App\">\n      <StyledContainer>\n        <Row>\n          <Col>\n            <input\n              type=\"text\"\n              placeholder=\"Inserta message\"\n              onKeyUp={handleSubmit}\n            />\n          </Col>\n        </Row>\n        <StyledRow>\n          <StyledCol lg={8} lgOffset={2}>\n            <WrapperChat>\n              {messages.map((message, index) => {\n                return (\n                  <p key={index}>\n                    {message.from}: {message.body}\n                  </p>\n                )\n              })}\n            </WrapperChat>\n          </StyledCol>\n        </StyledRow>\n      </StyledContainer>\n    </Layout>\n  )\n}\n\nexport default Home\n","import React from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n\nimport Home from './Home'\n\nconst App = () => {\n  return (\n    <Router>\n      <Switch>\n        {/* <Route path=\"/about\">\n          <About />\n        </Route>\n        <Route path=\"/users\">\n          <Users />\n        </Route> */}\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './assets/css/font.css'\nimport App from './views'\nimport * as serviceWorker from './assets/js/serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}